// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  city      String?
  cancerType String? @map("cancer_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  // Relations
  plans         UserPlan[]
  appointments  Appointment[]
  communityPosts CommunityPost[]

  @@map("users")
}

model CareStep {
  id             Int      @id @default(autoincrement())
  cancerType     String   @map("cancer_type")
  stage          String   @default("Unknown")
  stepOrder      Int      @map("step_order")
  stepTitle      String   @map("step_title")
  stepDescription String  @map("step_description")

  @@map("care_steps")
}

model Provider {
  id       Int      @id @default(autoincrement())
  name     String
  category String   // 'Hospital', 'Oncologist', 'Lab', 'NGO'
  city     String
  address  String?
  lat      Float?
  lng      Float?
  phone    String?
  website  String?
  blurb    String?

  // Relations
  appointments Appointment[]

  @@map("providers")
}

model UserPlan {
  id         Int      @id @default(autoincrement())
  userId     String   @map("user_id")
  city       String
  cancerType String   @map("cancer_type")
  stage      String   @default("Unknown")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps UserPlanStep[]

  @@map("user_plans")
}

model UserPlanStep {
  id             Int      @id @default(autoincrement())
  planId         Int      @map("plan_id")
  stepOrder      Int      @map("step_order")
  stepTitle      String   @map("step_title")
  stepDescription String  @map("step_description")
  isDone         Boolean  @default(false) @map("is_done")

  // Relations
  plan UserPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("user_plan_steps")
}

model Appointment {
  id               Int      @id @default(autoincrement())
  userId           String   @map("user_id")
  title            String
  startsAt         DateTime @map("starts_at")
  location         String?
  providerId       Int?     @map("provider_id")
  notes            String?
  reminder24hSent  Boolean  @default(false) @map("reminder_24h_sent")
  reminder2hSent   Boolean  @default(false) @map("reminder_2h_sent")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider Provider? @relation(fields: [providerId], references: [id])

  @@map("appointments")
}

model CommunityPost {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  city      String
  cancerType String  @map("cancer_type")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  flagged   Boolean  @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("community_posts")
}